$(document).ready(function () {    var Context = {        Constants: {            width: window.innerWidth,            height: window.innerHeight,            lambdaColision: 0.05        },        GlobalVariables: {            freeze: false,            colisionActive: false        },        ThreeJSVariables: {            scene: new THREE.Scene(),            camera: new THREE.PerspectiveCamera(75,window.innerWidth / window.height, 0.1, 1000),            renderer: new THREE.WebGLRenderer()        },        init: function () {        }    };    //GEOMETRIES    var geometryCubeLevels = [    new THREE.CubeGeometry(0.05, 0.05, 0.05),    new THREE.CubeGeometry(0.1, 0.1, 0.1),    new THREE.CubeGeometry(0.175, 0.175, 0.175),    new THREE.CubeGeometry(0.20, 0.20, 0.20),    new THREE.CubeGeometry(0.3, 0.3, 0.3)];    var geometrySphereLevels = [    new THREE.SphereGeometry(0.05, 0.05, 0.05),    new THREE.SphereGeometry(0.1, 0.1, 0.1),    new THREE.SphereGeometry(0.15, 0.15, 0.15),    new THREE.SphereGeometry(0.20, 0.20, 0.20),    new THREE.SphereGeometry(0.3, 0.3, 0.3)];    var geometry = new THREE.CubeGeometry(0.4, 0.4, 0.4);    var geometry2 = new THREE.SphereGeometry(0.2, 0.2, 0.2);    //MATERIALS    var material = new THREE.MeshNormalMaterial({        color: 0x347896    });    var material2 = new THREE.MeshBasicMaterial({        color: 0xcc00ff    });    var materialSpheres = new THREE.MeshLambertMaterial({        color: 0x564390,        shading: THREE.FlatShading,        overdraw: false    });    //EXECUTION    Context.ThreeJSVariables.renderer.setSize(Context.Constants.width, Context.Constants.height);    document.body.appendChild(Context.ThreeJSVariables.renderer.domElement);    setTimeout(        function () {            Context.GlobalVariables.colisionActive = true;        }, 3000);        /*OBJECT DEFINITION     *     **/var MovableObject=function(Context,object,level){    var self=this;    self.eatingBuffer=0;    self.object=object;    self.object.castShadow=true;    self.freeze=false;                    self.level=level||0;    self.buffer=0;    self.bufferOverflow=5;                                var velocityClass=function(){        var selfv=this;        selfv.x=0;        selfv.y=0;        selfv.z=0;    };                    self.velocity=new velocityClass();                        self.resetRandom=function(){                            self.velocity.x=Utils.getRandom();          self.velocity.y=Utils.getRandom();          self.velocity.z=Utils.getRandom();        };                    self.resetRandom();					                    self.reflectSpeed=function(negative,axis){                            self.velocity[axis]=Math.pow(-1,negative ? -1:1 )*self.velocity[axis];    };                    self.increaseBuffer=function(level){        var otherObject=self;        otherObject.buffer+=level;        //console.log(level);        if(otherObject.buffer>otherObject.bufferOverflow){            otherObject.level++;            //console.log("inc");            var epsilonScale=0.2;            otherObject.buffer=0;            otherObject.object.scale.x+=epsilonScale;                                                otherObject.object.scale.y+=epsilonScale;            otherObject.object.scale.z+=epsilonScale;        }    }    self.checkColision=function(otherObject){                               if(self!=otherObject&&Utils.checkColisionOnAllAxis(self,otherObject))                             {                if(Utils.checkSameWeight(self,otherObject)){                var v=self.velocity;                self.velocity=otherObject.velocity;                otherObject.velocity=v;            }            else            {                   var copy=otherObject;                otherObject=Utils.getBiggerWeight(self,otherObject);                if(self==otherObject){                    copy.increaseBuffer(self.level);                } else{                    self.increaseBuffer(otherObject.level);                }                                        var ind=Context.GameVariables.movingObjects.indexOf(otherObject);                  var index=0;                for(index=0;index<Context.ThreeJSVariables.scene.__webglObjects.length;index++){                    if(Context.ThreeJSVariables.scene.__webglObjects[index].object==otherObject.object){                                                               Context.ThreeJSVariables.scene.remove(otherObject);                        Context.ThreeJSVariables.scene.__removeObject(otherObject);                        Context.ThreeJSVariables.scene.__webglObjects.splice(index,1);                                    Context.GameVariables.movingObjects.splice(ind,1);                                                                                      if(Context.GameVariables.movingObjects.length==1)                            Context.GlobalVariables.freeze=true;                        break;                    }                }               }                                                        }    }}     //BEGIN MASTER OBJECT                    var geometry3 = new THREE.SphereGeometry(0.275, 0.275, 0.275);    var object = new THREE.Mesh(geometry3, material2);    var masterObject = new MovableObject(object, 3);    Context.ThreeJSVariables.scene.add(object);    objects.push(masterObject);        //END MASTER OBJECT                  //BEGIN GENERATE OBJECTS                var object = null;    for (var k in geometryCubeLevels) {        for (var j = 1; j < numberOfObjects - k; j++) {            object = new THREE.Mesh(geometryCubeLevels[k], material);            Context.ThreeJSVariables.scene.add(object);            objects.push(new MovableObject(object, k + 1));        }    }    for (var z in geometrySphereLevels) {        for (var j = 1; j < numberOfObjects - k; j++) {            object = new THREE.Mesh(geometrySphereLevels[z], material);            Context.ThreeJSVariables.scene.add(object);            objects.push(new MovableObject(object, k + 1));        }    }    //END GENERATE OBJECTS    //SET CAMERA POSITION    var aspectRatio = Context.Constants.width / Context.Constants.height;    Context.ThreeJSVariables.camera.position.y = 0 //aspectRatio;    Context.ThreeJSVariables.camera.position.z = 8 //aspectRatio+5;//aspectRatio;    Context.ThreeJSVariables.camera.position.x = 0 //aspectRatio;    //CHANGE FOR EACH RESOLUTION    var max = {};    max.x = Context.Constants.width  / 165;    max.z = aspectRatio / 2;    max.y = Context.Constants.height / 165;    $("body").keydown(function (e) {        var offset = 0.005;        var key = e.which;        if (key == 37) {            masterObject.velocity.x -= offset;        }        if (key == 39) {            masterObject.velocity.x += offset;        }        if (key == 38) {            masterObject.velocity.y += offset;        }        if (key == 40) {            masterObject.velocity.y -= offset;        }    });    var i = 0;    var k = 0;    //EXECUTES 60 TIMES A SECOND    function render() {        requestAnimationFrame(render);        if (!Context.GlobalVariables.freeze) {                                 for (i = 0; i < objects.length; i++) {                //console.log("das");                if (objects[i]) {                    if (!objects[i].object.freeze) {                        //check colision                        if (Context.GlobalVariables.colisionActive) for (k = i + 1; k < objects.length; k++) {                            objects[i].checkColision(objects[k]);                        }                        //velocity                         objects[i].object.position.x += objects[i].velocity.x;                        if (Math.abs(objects[i].object.position.x) > max.x) {                            objects[i].reflectSpeed(objects[i].object.position.x > 0, 'x');                        }                        objects[i].object.position.y += objects[i].velocity.y;                        if (Math.abs(objects[i].object.position.y) > max.y) {                            objects[i].reflectSpeed(objects[i].object.position.y > 0, 'y');                        }                        objects[i].object.rotation.x += objects[i].velocity.x;                        objects[i].object.rotation.y += objects[i].velocity.y;                        objects[i].object.rotation.z += objects[i].velocity.z;                    }                }            }            Context.ThreeJSVariables.renderer.render(Context.ThreeJSVariables.scene, Context.ThreeJSVariables.camera);        }    }    render();});